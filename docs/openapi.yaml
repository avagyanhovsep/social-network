openapi: 3.0.3
info:
  title: Social Network Auth API
  version: 1.0.0
  description: Authentication & account settings endpoints (signup, signin, verify, forgot/reset password, change email/password).
servers:
  - url: http://localhost:4002
    description: Local dev
tags:
  - name: Auth
    description: Public auth endpoints
  - name: User
    description: Authenticated user endpoints
  - name: Settings
    description: Profile settings (may require auth depending on middleware)

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            examples:
              default:
                value:
                  firstName: Hovsep
                  lastName: Avagyan
                  username: hovsep_01
                  email: hovsep@example.com
                  password: P@ssw0rd!
      responses:
        '200':
          description: Signed up and verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Missing/invalid credentials or duplicate email/username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/signin:
    post:
      tags: [Auth]
      summary: Sign in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
            examples:
              default:
                value:
                  email: hovsep@example.com
                  password: P@ssw0rd!
      responses:
        '200':
          description: Signin successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponse'
        '401':
          description: Missing credentials, wrong credentials, or not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/user:
    get:
      tags: [User]
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized / missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify:
    post:
      tags: [Auth]
      summary: Verify account with 6-digit code (email-confirmation)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
            examples:
              default:
                value:
                  email: hovsep@example.com
                  signinCode: "123456"
      responses:
        '200':
          description: Account verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Missing code or wrong code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Start password reset (send 6-digit code)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            examples:
              default:
                value:
                  email: hovsep@example.com
      responses:
        '200':
          description: Reset code sent to email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Missing email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password/verify-code:
    post:
      tags: [Auth]
      summary: Verify the 6-digit reset code (cpvc)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyResetCodeRequest'
            examples:
              default:
                value:
                  email: hovsep@example.com
                  code: "654321"
      responses:
        '200':
          description: Code is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Wrong code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password/reset:
    post:
      tags: [Auth]
      summary: Set a new password after code verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            examples:
              default:
                value:
                  userEmail: hovsep@example.com
                  password: NewP@ssw0rd!
      responses:
        '200':
          description: Password reset success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Missing password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found (edge case if email wrong)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '407':
          description: Same as old password (custom)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile/settings/change-email:
    patch:
      tags: [Settings]
      summary: Change user email
      # NOTE: Your route is public right now; add bearerAuth here if you secure it later.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailRequest'
            examples:
              default:
                value:
                  currentEmail: old@example.com
                  newEmail: new@example.com
      responses:
        '200':
          description: Email changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Missing/invalid inputs or same email as current
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found on current email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile/settings/change-password:
    patch:
      tags: [Settings]
      summary: Change password
      # NOTE: Your route is public right now; add bearerAuth here if you secure it later.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            examples:
              default:
                value:
                  currentemail: hovsep@example.com
                  newPassword: NewP@ssw0rd!
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Missing inputs or same as previous password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        firstName: { type: string, example: Hovsep }
        lastName: { type: string, example: Avagyan }
        username: { type: string, example: hovsep_01 }
        email:
          type: string
          format: email
          example: hovsep@example.com
        isSigninAllowed:
          type: boolean
          example: false
        signinCode:
          type: string
          description: 6-digit verification code (signup)
          pattern: '^\d{6}$'
          nullable: true
          example: "123456"
        cpvc:
          type: string
          description: 6-digit password-reset code
          pattern: '^\d{6}$'
          nullable: true
          example: "654321"
        createdAt:
          type: string
          format: date-time
          example: 2025-10-19T18:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-10-19T18:00:00.000Z

    SignupRequest:
      type: object
      required: [firstName, lastName, username, email, password]
      properties:
        firstName: { type: string }
        lastName: { type: string }
        username: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }
        isSigninAllowed:
          type: boolean
          description: Should remain false until verify
          example: false

    SigninRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    SigninResponse:
      type: object
      properties:
        message: { type: string, example: hovsep_01 signed in successfully... }
        token: { type: string, description: JWT access token }

    VerifyRequest:
      type: object
      required: [email, signinCode]
      properties:
        email: { type: string, format: email }
        signinCode:
          type: string
          pattern: '^\d{6}$'
          example: "123456"

    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email }

    VerifyResetCodeRequest:
      type: object
      required: [email, code]
      properties:
        email: { type: string, format: email }
        code:
          type: string
          pattern: '^\d{6}$'
          example: "654321"

    ResetPasswordRequest:
      type: object
      required: [userEmail, password]
      properties:
        userEmail: { type: string, format: email }
        password: { type: string, format: password }

    ChangeEmailRequest:
      type: object
      required: [currentEmail, newEmail]
      properties:
        currentEmail: { type: string, format: email }
        newEmail: { type: string, format: email }

    ChangePasswordRequest:
      type: object
      required: [currentemail, newPassword]
      properties:
        currentemail:
          type: string
          format: email
          description: NOTE: field name matches your code (`currentemail`)
        newPassword: { type: string, format: password }

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: Operation completed successfully

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Missing/Invalid credentials...
